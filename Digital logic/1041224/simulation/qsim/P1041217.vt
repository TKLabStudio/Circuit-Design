// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/24/2015 11:52:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    P1041217
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module P1041217_vlg_sample_tst(
	BUTT,
	CLK,
	sampler_tx
);
input  BUTT;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(BUTT or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module P1041217_vlg_check_tst (
	o0,
	o1,
	o2,
	o3,
	o4,
	o5,
	o6,
	o7,
	o8,
	o9,
	sampler_rx
);
input  o0;
input  o1;
input  o2;
input  o3;
input  o4;
input  o5;
input  o6;
input  o7;
input  o8;
input  o9;
input sampler_rx;

reg  o0_expected;
reg  o1_expected;
reg  o2_expected;
reg  o3_expected;
reg  o4_expected;
reg  o5_expected;
reg  o6_expected;
reg  o7_expected;
reg  o8_expected;
reg  o9_expected;

reg  o0_prev;
reg  o1_prev;
reg  o2_prev;
reg  o3_prev;
reg  o4_prev;
reg  o5_prev;
reg  o6_prev;
reg  o7_prev;
reg  o8_prev;
reg  o9_prev;

reg  o0_expected_prev;
reg  o1_expected_prev;
reg  o2_expected_prev;
reg  o3_expected_prev;
reg  o4_expected_prev;
reg  o5_expected_prev;
reg  o6_expected_prev;
reg  o7_expected_prev;
reg  o8_expected_prev;
reg  o9_expected_prev;

reg  last_o0_exp;
reg  last_o1_exp;
reg  last_o2_exp;
reg  last_o3_exp;
reg  last_o4_exp;
reg  last_o5_exp;
reg  last_o6_exp;
reg  last_o7_exp;
reg  last_o8_exp;
reg  last_o9_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	o0_prev = o0;
	o1_prev = o1;
	o2_prev = o2;
	o3_prev = o3;
	o4_prev = o4;
	o5_prev = o5;
	o6_prev = o6;
	o7_prev = o7;
	o8_prev = o8;
	o9_prev = o9;
end

// update expected /o prevs

always @(trigger)
begin
	o0_expected_prev = o0_expected;
	o1_expected_prev = o1_expected;
	o2_expected_prev = o2_expected;
	o3_expected_prev = o3_expected;
	o4_expected_prev = o4_expected;
	o5_expected_prev = o5_expected;
	o6_expected_prev = o6_expected;
	o7_expected_prev = o7_expected;
	o8_expected_prev = o8_expected;
	o9_expected_prev = o9_expected;
end



// expected o0
initial
begin
	o0_expected = 1'bX;
end 

// expected o1
initial
begin
	o1_expected = 1'bX;
end 

// expected o2
initial
begin
	o2_expected = 1'bX;
end 

// expected o3
initial
begin
	o3_expected = 1'bX;
end 

// expected o4
initial
begin
	o4_expected = 1'bX;
end 

// expected o5
initial
begin
	o5_expected = 1'bX;
end 

// expected o6
initial
begin
	o6_expected = 1'bX;
end 

// expected o7
initial
begin
	o7_expected = 1'bX;
end 

// expected o8
initial
begin
	o8_expected = 1'bX;
end 

// expected o9
initial
begin
	o9_expected = 1'bX;
end 
// generate trigger
always @(o0_expected or o0 or o1_expected or o1 or o2_expected or o2 or o3_expected or o3 or o4_expected or o4 or o5_expected or o5 or o6_expected or o6 or o7_expected or o7 or o8_expected or o8 or o9_expected or o9)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o0 = %b | expected o1 = %b | expected o2 = %b | expected o3 = %b | expected o4 = %b | expected o5 = %b | expected o6 = %b | expected o7 = %b | expected o8 = %b | expected o9 = %b | ",o0_expected_prev,o1_expected_prev,o2_expected_prev,o3_expected_prev,o4_expected_prev,o5_expected_prev,o6_expected_prev,o7_expected_prev,o8_expected_prev,o9_expected_prev);
	$display("| real o0 = %b | real o1 = %b | real o2 = %b | real o3 = %b | real o4 = %b | real o5 = %b | real o6 = %b | real o7 = %b | real o8 = %b | real o9 = %b | ",o0_prev,o1_prev,o2_prev,o3_prev,o4_prev,o5_prev,o6_prev,o7_prev,o8_prev,o9_prev);
`endif
	if (
		( o0_expected_prev !== 1'bx ) && ( o0_prev !== o0_expected_prev )
		&& ((o0_expected_prev !== last_o0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o0_expected_prev);
		$display ("     Real value = %b", o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o0_exp = o0_expected_prev;
	end
	if (
		( o1_expected_prev !== 1'bx ) && ( o1_prev !== o1_expected_prev )
		&& ((o1_expected_prev !== last_o1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o1_exp = o1_expected_prev;
	end
	if (
		( o2_expected_prev !== 1'bx ) && ( o2_prev !== o2_expected_prev )
		&& ((o2_expected_prev !== last_o2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o2_exp = o2_expected_prev;
	end
	if (
		( o3_expected_prev !== 1'bx ) && ( o3_prev !== o3_expected_prev )
		&& ((o3_expected_prev !== last_o3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o3_exp = o3_expected_prev;
	end
	if (
		( o4_expected_prev !== 1'bx ) && ( o4_prev !== o4_expected_prev )
		&& ((o4_expected_prev !== last_o4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o4_expected_prev);
		$display ("     Real value = %b", o4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_o4_exp = o4_expected_prev;
	end
	if (
		( o5_expected_prev !== 1'bx ) && ( o5_prev !== o5_expected_prev )
		&& ((o5_expected_prev !== last_o5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o5_expected_prev);
		$display ("     Real value = %b", o5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_o5_exp = o5_expected_prev;
	end
	if (
		( o6_expected_prev !== 1'bx ) && ( o6_prev !== o6_expected_prev )
		&& ((o6_expected_prev !== last_o6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o6_expected_prev);
		$display ("     Real value = %b", o6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_o6_exp = o6_expected_prev;
	end
	if (
		( o7_expected_prev !== 1'bx ) && ( o7_prev !== o7_expected_prev )
		&& ((o7_expected_prev !== last_o7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o7_expected_prev);
		$display ("     Real value = %b", o7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_o7_exp = o7_expected_prev;
	end
	if (
		( o8_expected_prev !== 1'bx ) && ( o8_prev !== o8_expected_prev )
		&& ((o8_expected_prev !== last_o8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o8_expected_prev);
		$display ("     Real value = %b", o8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o8_exp = o8_expected_prev;
	end
	if (
		( o9_expected_prev !== 1'bx ) && ( o9_prev !== o9_expected_prev )
		&& ((o9_expected_prev !== last_o9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o9_expected_prev);
		$display ("     Real value = %b", o9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o9_exp = o9_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module P1041217_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BUTT;
reg CLK;
// wires                                               
wire o0;
wire o1;
wire o2;
wire o3;
wire o4;
wire o5;
wire o6;
wire o7;
wire o8;
wire o9;

wire sampler;                             

// assign statements (if any)                          
P1041217 i1 (
// port map - connection between master ports and signals/registers   
	.BUTT(BUTT),
	.CLK(CLK),
	.o0(o0),
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.o5(o5),
	.o6(o6),
	.o7(o7),
	.o8(o8),
	.o9(o9)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// BUTT
initial
begin
	BUTT = 1'b0;
	BUTT = #40000 1'b1;
	BUTT = #20000 1'b0;
end 

P1041217_vlg_sample_tst tb_sample (
	.BUTT(BUTT),
	.CLK(CLK),
	.sampler_tx(sampler)
);

P1041217_vlg_check_tst tb_out(
	.o0(o0),
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.o4(o4),
	.o5(o5),
	.o6(o6),
	.o7(o7),
	.o8(o8),
	.o9(o9),
	.sampler_rx(sampler)
);
endmodule

