// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2015 11:18:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    encoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module encoder_vlg_sample_tst(
	en,
	k0,
	k1,
	k2,
	k3,
	k4,
	k5,
	k6,
	k7,
	sampler_tx
);
input  en;
input  k0;
input  k1;
input  k2;
input  k3;
input  k4;
input  k5;
input  k6;
input  k7;
output sampler_tx;

reg sample;
time current_time;
always @(en or k0 or k1 or k2 or k3 or k4 or k5 or k6 or k7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module encoder_vlg_check_tst (
	A0,
	A1,
	A2,
	EON,
	GSN,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  EON;
input  GSN;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  EON_expected;
reg  GSN_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  EON_prev;
reg  GSN_prev;

reg  A0_expected_prev;
reg  A1_expected_prev;
reg  A2_expected_prev;
reg  EON_expected_prev;
reg  GSN_expected_prev;

reg  last_A0_exp;
reg  last_A1_exp;
reg  last_A2_exp;
reg  last_EON_exp;
reg  last_GSN_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	EON_prev = EON;
	GSN_prev = GSN;
end

// update expected /o prevs

always @(trigger)
begin
	A0_expected_prev = A0_expected;
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	EON_expected_prev = EON_expected;
	GSN_expected_prev = GSN_expected;
end



// expected A0
initial
begin
	A0_expected = 1'b0;
	A0_expected = #10000 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected EON
initial
begin
	EON_expected = 1'bX;
end 

// expected GSN
initial
begin
	GSN_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or EON_expected or EON or GSN_expected or GSN)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected EON = %b | expected GSN = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,EON_expected_prev,GSN_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real EON = %b | real GSN = %b | ",A0_prev,A1_prev,A2_prev,EON_prev,GSN_prev);
`endif
	if (
		( A0_expected_prev !== 1'bx ) && ( A0_prev !== A0_expected_prev )
		&& ((A0_expected_prev !== last_A0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A0_expected_prev);
		$display ("     Real value = %b", A0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A0_exp = A0_expected_prev;
	end
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( EON_expected_prev !== 1'bx ) && ( EON_prev !== EON_expected_prev )
		&& ((EON_expected_prev !== last_EON_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EON_expected_prev);
		$display ("     Real value = %b", EON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EON_exp = EON_expected_prev;
	end
	if (
		( GSN_expected_prev !== 1'bx ) && ( GSN_prev !== GSN_expected_prev )
		&& ((GSN_expected_prev !== last_GSN_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GSN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GSN_expected_prev);
		$display ("     Real value = %b", GSN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_GSN_exp = GSN_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module encoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg en;
reg k0;
reg k1;
reg k2;
reg k3;
reg k4;
reg k5;
reg k6;
reg k7;
// wires                                               
wire A0;
wire A1;
wire A2;
wire EON;
wire GSN;

wire sampler;                             

// assign statements (if any)                          
encoder i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.en(en),
	.EON(EON),
	.GSN(GSN),
	.k0(k0),
	.k1(k1),
	.k2(k2),
	.k3(k3),
	.k4(k4),
	.k5(k5),
	.k6(k6),
	.k7(k7)
);

// k0
initial
begin
	k0 = 1'b0;
	k0 = #10000 1'b1;
	k0 = #70000 1'b0;
	k0 = #10000 1'b1;
end 

// k1
initial
begin
	k1 = 1'b1;
	k1 = #10000 1'b0;
	k1 = #10000 1'b1;
	k1 = #70000 1'b0;
	k1 = #10000 1'b1;
end 

// k2
initial
begin
	k2 = 1'b1;
	k2 = #20000 1'b0;
	k2 = #10000 1'b1;
	k2 = #70000 1'b0;
	k2 = #10000 1'b1;
end 

// k3
initial
begin
	k3 = 1'b1;
	k3 = #30000 1'b0;
	k3 = #10000 1'b1;
	k3 = #70000 1'b0;
	k3 = #10000 1'b1;
end 

// k4
initial
begin
	k4 = 1'b1;
	k4 = #40000 1'b0;
	k4 = #10000 1'b1;
	k4 = #70000 1'b0;
	k4 = #10000 1'b1;
end 

// k5
initial
begin
	k5 = 1'b1;
	k5 = #50000 1'b0;
	k5 = #10000 1'b1;
	k5 = #70000 1'b0;
	k5 = #10000 1'b1;
end 

// k6
initial
begin
	k6 = 1'b1;
	k6 = #60000 1'b0;
	k6 = #10000 1'b1;
	k6 = #70000 1'b0;
	k6 = #10000 1'b1;
end 

// k7
initial
begin
	k7 = 1'b1;
	k7 = #70000 1'b0;
	k7 = #10000 1'b1;
	k7 = #70000 1'b0;
	k7 = #10000 1'b1;
end 

// en
initial
begin
	en = 1'b0;
	en = #90000 1'b1;
	en = #20000 1'b0;
end 

encoder_vlg_sample_tst tb_sample (
	.en(en),
	.k0(k0),
	.k1(k1),
	.k2(k2),
	.k3(k3),
	.k4(k4),
	.k5(k5),
	.k6(k6),
	.k7(k7),
	.sampler_tx(sampler)
);

encoder_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.EON(EON),
	.GSN(GSN),
	.sampler_rx(sampler)
);
endmodule

